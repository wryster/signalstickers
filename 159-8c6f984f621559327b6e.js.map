{"version":3,"sources":["webpack:///./src/components/contribute/Contribute.tsx"],"names":["Contribute","SIGNAL_ART_URL_PATTERN","TAGS_PATTERN","initialValues","signalArtUrl","source","tags","isNsfw","undefined","validators","a","matches","RegExp","exec","R","getStickerPackDirectory","getStickerPack","packId","test","SyntaxHighlighter","ContributeComponent","useState","onSubmitClick","setHasBeenSubmitted","setYmlBlob","setPreviewUrl","className","onSubmit","values","Error","tag","key","nsfw","indent","validateOnChange","validateOnBlur","isSubmitting","noValidate","cx","errors","htmlFor","type","id","name","validate","placeholder","href","target","rel","value","checked","disabled","onClick","ymlBlob","language","style","customStyle","margin"],"mappings":"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","file":"159-8c6f984f621559327b6e.js","sourcesContent":["import {Formik, Form, Field, ErrorMessage} from 'formik';\nimport {cx} from 'linaria';\nimport {styled} from 'linaria/react';\nimport {darken} from 'polished';\nimport * as R from 'ramda';\nimport React, {useState} from 'react';\nimport {PrismAsyncLight as SyntaxHighlighter} from 'react-syntax-highlighter';\nimport yamlLanguage from 'react-syntax-highlighter/dist/esm/languages/prism/yaml';\nimport syntaxTheme from 'react-syntax-highlighter/dist/esm/styles/prism/base16-ateliersulphurpool.light';\nimport yaml from 'js-yaml';\n\nimport {GRAY} from 'etc/colors';\nimport {getStickerPackDirectory, getStickerPack} from 'lib/stickers';\nimport {bp} from 'lib/utils';\n\n\n/**\n * Test pack:\n * https://signal.art/addstickers/#pack_id=b2e52b07dfb0af614436508c51aa24eb&pack_key=66224990b3e956ad4a735830df8cd071275afeae79db9797e57d99314daffc77\n */\n\n\n// ----- Styles ----------------------------------------------------------------\n\nconst Contribute = styled.div`\n  background-color: white;\n\n  @media ${bp('lg')} {\n    border-radius: 4px;\n    border: 1px solid ${darken(0.15, GRAY)};\n  }\n\n  /**\n   * Ensures error feedback containers are always visible (even if empty) so\n   * that controls do not jump around as they move between valid and invalid\n   * states.\n   */\n  & .invalid-feedback {\n    display: block;\n  }\n\n\n  & pre[class*=\"language-\"] {\n    margin: 0;\n  }\n`;\n\n\n// ----- Types -----------------------------------------------------------------\n\nexport interface FormValues {\n  signalArtUrl: string;\n  source: string;\n  tags: string;\n  isNsfw?: 'true' | 'false';\n}\n\n\n// ----- Locals ----------------------------------------------------------------\n\n/**\n * Regular expression used to validate signal.art URLs for sticker packs.\n */\nconst SIGNAL_ART_URL_PATTERN = /^https:\\/\\/signal.art\\/addstickers\\/#pack_id=([A-Za-z0-9]+)&pack_key=([A-Za-z0-9]+)$/g;\n\n/**\n * Regular expression used to validate lists of tags.\n */\nconst TAGS_PATTERN = /^(?:([\\w\\d-_ ]+))+(?:, ([\\w\\d-_ ]+))*$/g;\n\n/**\n * Initial values for the form.\n */\nconst initialValues: FormValues = {\n  signalArtUrl: '',\n  source: '',\n  tags: '',\n  isNsfw: undefined\n};\n\n/**\n * Validators for each field in our form.\n */\nconst validators = {\n  signalArtUrl: async (signalArtUrl: string) => {\n    if (!signalArtUrl) {\n      return 'This field is required.';\n    }\n\n    const matches = new RegExp(SIGNAL_ART_URL_PATTERN).exec(signalArtUrl);\n\n    if (!matches) {\n      return 'Invalid signal.art URL.';\n    }\n\n    const [, packId, packKey] = matches;\n\n    if (R.find(R.pathEq(['meta', 'id'], packId) , await getStickerPackDirectory())) {\n      return 'A sticker pack with that ID already exists in the directory.';\n    }\n\n    try {\n      await getStickerPack(packId, packKey);\n    } catch (err) {\n      return 'Invalid sticker pack. Please check the pack ID and key.';\n    }\n  },\n  source: (source: string) => {\n    if (source && source.length > 320) {\n      return 'This field must be no longer than 320 characters.';\n    }\n  },\n  tags: (tags: string) => {\n    if (tags !== '' && !(new RegExp(TAGS_PATTERN).test(tags))) {\n      return 'Invalid value. Tags must be a list of comma-delimited strings.';\n    }\n  },\n  isNsfw: (isNsfw?: boolean) => {\n    if (isNsfw === undefined) {\n      return 'This field is required.';\n    }\n  }\n};\n\n\n// ----- Component -------------------------------------------------------------\n\nSyntaxHighlighter.registerLanguage('yaml', yamlLanguage);\n\nconst ContributeComponent: React.FunctionComponent = () => {\n  const [hasBeenSubmitted, setHasBeenSubmitted] = useState(false);\n  const [ymlBlob, setYmlBlob] = useState('');\n  const [previewUrl, setPreviewUrl] = useState('');\n\n\n  /**\n   * Sets 'hasBeenSubmitted' when the Submit button is clicked. We need this\n   * because Formik will not call our onSubmit function when the submit button\n   * is clicked _but_ validation fails. This makes sense, but because we want to\n   * change the way validation errors are presented to the user after the first\n   * submit attempt, we need to track \"attempts\" separately.\n   */\n  const onSubmitClick = () => {\n    setHasBeenSubmitted(true);\n    setYmlBlob('');\n    setPreviewUrl('');\n  };\n\n\n  /**\n   * Called when the form is submitted and has passed validation.\n   */\n  const onSubmit: any = (values: FormValues) => {\n    const matches = new RegExp(SIGNAL_ART_URL_PATTERN).exec(values.signalArtUrl);\n\n    if (!matches) {\n      throw new Error('Unable to extract pack ID and pack key from signal.art URL.');\n    }\n\n    const [, packId, packKey] = matches;\n\n    const tags = R.uniq(values.tags\n      .split(',')\n      .map(tag => tag.trim())\n      .filter(tag => tag.length));\n\n    setYmlBlob(yaml.safeDump({\n      [packId]: {\n        key: packKey,\n        source: values.source,\n        tags,\n        nsfw: values.isNsfw === 'true' ? true : false\n      }\n    }, {\n      indent: 2\n    }).trim());\n\n    setPreviewUrl(\n      `https://signalstickers.com/pack/${packId}?key=${packKey}`\n    );\n\n    return true;\n  };\n\n\n  // ----- Render --------------------------------------------------------------\n\n  return (\n    <Contribute className=\"my-4 p-lg-3 px-lg-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <p className=\"mt-lg-3 mb-4\">\n            Getting your sticker pack listed in the Signal Stickers directory is\n            easy! First, paste the <code>signal.art</code> link for your sticker\n            pack, including the <code>pack_id</code> and <code>pack_key</code> values,\n            into the form below. Then, answer a few questions about your sticker\n            pack and add optional metadata.\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12 col-md-10 offset-md-1\">\n          <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validateOnChange={hasBeenSubmitted}\n            validateOnBlur={hasBeenSubmitted}\n          >{({values, errors, isValidating, isSubmitting}) => (\n            <Form noValidate>\n\n              {/* [Field] Signal Art Url */}\n              <div className=\"form-group\">\n                <div className=\"form-row\">\n                  <label className={cx('col-12', errors.signalArtUrl && 'text-danger')} htmlFor=\"signal-art-url\">\n                    Signal Art URL:\n                    <Field\n                      type=\"text\"\n                      id=\"signal-art-url\"\n                      name=\"signalArtUrl\"\n                      validate={validators.signalArtUrl}\n                      className={cx('form-control', errors.signalArtUrl && 'is-invalid')}\n                      placeholder=\"https://signal.art/addstickers/#pack_id=<your pack id>&pack_key=<your pack key>\"\n                    />\n                    <div className=\"invalid-feedback\">\n                      <ErrorMessage name=\"signalArtUrl\" />&nbsp;\n                    </div>\n                  </label>\n                </div>\n              </div>\n\n              {/* [Field] Source */}\n              <div className=\"form-group\">\n                <div className=\"form-row\">\n                  <label className={cx('col-12', errors.source && 'text-danger')} htmlFor=\"source\">\n                    (Optional) Source:\n                    <Field\n                      type=\"text\"\n                      id=\"source\"\n                      name=\"source\"\n                      validate={validators.source}\n                      className={cx('form-control', errors.source && 'is-invalid')}\n                    />\n                    <small className=\"form-text text-muted\">Original author, website, company, etc.</small>\n                    <div className=\"invalid-feedback\">\n                      <ErrorMessage name=\"source\" />&nbsp;\n                    </div>\n                  </label>\n                </div>\n              </div>\n\n              {/* [Field] Tags */}\n              <div className=\"form-group mb-4\">\n                <div className=\"form-row\">\n                  <label className={cx('col-12', errors.tags && 'text-danger')} htmlFor=\"tags\">\n                    (Optional) Tags:\n                    <Field\n                      type=\"text\"\n                      id=\"tags\"\n                      name=\"tags\"\n                      validate={validators.tags}\n                      className={cx('form-control', errors.tags && 'is-invalid')}\n                    />\n                    <small className=\"form-text text-muted\">Comma-separated list of words.</small>\n                    <div className=\"invalid-feedback\">\n                      <ErrorMessage name=\"tags\" />&nbsp;\n                    </div>\n                  </label>\n                </div>\n              </div>\n\n              {/* [Field] NSFW */}\n              <div className=\"form-group\">\n                <div className=\"form-row\">\n                  <label className={cx('col-12', 'mb-2', errors.isNsfw && 'text-danger')}>\n                    Is your sticker pack <a href=\"https://www.urbandictionary.com/define.php?term=NSFW\" target=\"_blank\" rel=\"noreferrer\">NSFW</a>?\n                  </label>\n                </div>\n                <div className=\"form-row\">\n                  <div className=\"col-12 mb-1\">\n                    <div className=\"custom-control custom-radio\">\n                      <Field\n                        type=\"radio\"\n                        id=\"is-nsfw-true\"\n                        name=\"isNsfw\"\n                        validate={validators.isNsfw}\n                        className={cx('custom-control-input', errors.isNsfw && 'is-invalid')}\n                        value=\"true\"\n                        checked={values.isNsfw === 'true'}\n                      />\n                      <label className=\"custom-control-label\" htmlFor=\"is-nsfw-true\">\n                        Yes\n                      </label>\n                    </div>\n                  </div>\n                  <div className=\"col-12 mb-1\">\n                    <div className=\"custom-control custom-radio\">\n                      <Field\n                        type=\"radio\"\n                        id=\"is-nsfw-false\"\n                        name=\"isNsfw\"\n                        validate={validators.isNsfw}\n                        className={cx('custom-control-input', errors.isNsfw && 'is-invalid')}\n                        value=\"false\"\n                        checked={values.isNsfw === 'false'}\n                      />\n                      <label className=\"custom-control-label\" htmlFor=\"is-nsfw-false\">No</label>\n                    </div>\n                    <div className=\"invalid-feedback\">\n                      <ErrorMessage name=\"isNsfw\" />&nbsp;\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* [Control] Submit */}\n              <div className=\"form-group\">\n                <div className=\"form-row\">\n                  <div className=\"col-12\">\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled={isSubmitting || isValidating} onClick={onSubmitClick}>\n                      Generate YML\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n            </Form>\n          )}\n          </Formik>\n        </div>\n      </div>\n\n      {/* Rendered YML Output */}\n      {ymlBlob ?\n      <>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <hr />\n            <p className=\"mt-4 mb-4\">\n              Great! Below is the YML blob you will need to add at the end of <code>stickers.yml</code> in the <a href=\"https://github.com/signalstickers/signalstickers/edit/master/stickers.yml\" target=\"_blank\" rel=\"noreferrer\">Signal Stickers repository</a>.\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12 col-md-10 offset-md-1\">\n            <div className=\"card\">\n              <SyntaxHighlighter language=\"yaml\" style={syntaxTheme} customStyle={{margin: '0'}}>\n                {ymlBlob}\n              </SyntaxHighlighter>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <p className=\"mt-4 mb-4\">\n              Please also include this link in your Pull Request description, as it allows us to review your pack easily!\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12 col-md-10 offset-md-1\">\n            <div className=\"card mb-3\">\n              {/* Not YAML, but language is mandatory and this gets rendered fine. */}\n              <SyntaxHighlighter language=\"yaml\" style={syntaxTheme} customStyle={{margin: '0'}}>\n                {previewUrl}\n              </SyntaxHighlighter>\n            </div>\n          </div>\n        </div>\n      </>\n      : null}\n    </Contribute>\n  );\n};\n\n\nexport default ContributeComponent;\n"],"sourceRoot":""}